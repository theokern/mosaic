/*
 * Copyright (c) 2020 Fraunhofer FOKUS and others. All rights reserved.
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contact: mosaic@fokus.fraunhofer.de
 */

package org.eclipse.mosaic.lib.database.route;

import org.eclipse.mosaic.lib.database.road.Connection;
import org.eclipse.mosaic.lib.database.road.Node;

import java.util.Objects;
import javax.annotation.Nonnull;

/**
 * This represents part of a {@link Route} which contains all necessary information for
 * node- and edge-based traffic simulators.
 */
public class Edge {

    private final String id;
    private final Connection connection;
    private final Node fromNode;
    private final Node toNode;

    /**
     * Constructor for completely new connections based on an imported osm network with a given id.
     *
     * @param connection Connection
     */
    public Edge(@Nonnull Connection connection, @Nonnull String id, @Nonnull Node from, @Nonnull Node to) {
        this(id, connection, from, to);
    }

    /**
     * Constructor for completely new connections based on an imported osm network.
     *
     * @param connection Connection
     * @param from       Node
     * @param to         Node
     */
    public Edge(@Nonnull Connection connection, @Nonnull Node from, @Nonnull Node to) {
        this(createEdgeId(connection, from), connection, from, to);
    }

    /**
     * Default constructor.
     *
     * @param id         String
     * @param connection Connection
     * @param from       Node
     * @param to         Node
     */
    public Edge(@Nonnull String id, @Nonnull Connection connection, @Nonnull Node from, @Nonnull Node to) {
        this.id = Objects.requireNonNull(id);
        this.connection = Objects.requireNonNull(connection);
        this.fromNode = Objects.requireNonNull(from);
        this.toNode = Objects.requireNonNull(to);
    }

    /**
     * Generates an edge id out of the dependant data.
     *
     * @return Id of the edge.
     */
    @Nonnull
    public String getId() {
        return id;
    }

    /**
     * The {@link Connection} this edge is a part from. To determine which part please have a look
     * at {@link #getFromNode()} and {@link #getToNode()};
     *
     * @return Connection of the edge.
     */
    @Nonnull
    public Connection getConnection() {
        return connection;
    }

    /**
     * The {@link Node} the edge starts on the {@link Connection} (see {@link #getConnection()}).
     *
     * @return Node from the connection starts.
     */
    @Nonnull
    public Node getFromNode() {
        return fromNode;
    }

    /**
     * The {@link Node} the edge ends on the {@link Connection} (see {@link #getConnection()}).
     *
     * @return End node of the connection.
     */
    @Nonnull
    public Node getToNode() {
        return toNode;
    }

    /**
     * This checks if the given edge id follows a format compatible with the edge id format.
     * ATTENTION: this does NOT assure that the id actually is generated by the database but only,
     * that we can read the format and try to analyze the values.
     *
     * @param edgeId Edge id to check whether it is compatible with MOSAIC format.
     * @return true if the scenario is compatible
     */
    public static boolean isScenarioCompatible(@Nonnull String edgeId) {
        return (edgeId.split("_").length == 4);
    }

    /**
     * Create an edge id in the compatible MOSAIC format.
     *
     * @param connection Id of the connection to create the first part of the edge Id.
     * @param fromNode   Node Id to build the last part of the edge Id.
     * @return Created edge Id.
     */
    public static String createEdgeId(@Nonnull Connection connection, @Nonnull Node fromNode) {
        return connection.getId() + "_" + fromNode.getId();
    }

    /**
     * This parses the edge id and extracts the connection id from it.
     * This only works as long as the assumptions about the composed single IDs are correct and
     * {@link #isScenarioCompatible} is true.
     *
     * @param edgeId Edge id from the connection Id will be extracted.
     * @return Connection id.
     */
    public static String getConnectionIdFromId(@Nonnull String edgeId) {
        // we assume that:
        // - node IDs are strings without underscores
        // - connection IDs possibly have underscores
        return edgeId.substring(0, edgeId.lastIndexOf('_'));
    }

    /**
     * This parses the edge id and extracts the id of the 'from' node from it.
     * This only works, as long as the assumptions about the composed single IDs are correct.
     *
     * @param edgeId Edge id from the node Id will be extracted.
     * @return connection id
     */
    public static String getFromNodeIdFromId(@Nonnull String edgeId) {
        // we assume that:
        // - node IDs are strings without underscores
        // - connection IDs possibly have underscores
        return edgeId.substring(edgeId.lastIndexOf('_') + 1);
    }
}
